#!/usr/bin/env ruby

$:.unshift(File.dirname(__FILE__) + '/../lib')

require 'smith'
require 'pp'

class AgentCommands

  class AgentDoesNotExist < RuntimeError; end

  def ls(opts={})
    Smith::Sync::Messaging.new(:agents_list).send_and_receive_message(nil, :timeout => 5) do |header,list,pass_through|
      list
    end
  end

  alias list ls

  def agents(opts={})
    Smith::Sync::Messaging.new(:agents_available).send_and_receive_message(nil, :timeout => 5) do |header,agents,pass_through|
      agents
    end
  end

  def message(opts={})
    args = opts[:args]
    queue = args[0]
    payload = (args[2] && args[2] == :json) ? args[1].to_json : args[1]
    Smith::Sync::Messaging.new(queue).send_message(payload)
    "sending %s to %s\n" % [payload, queue]
  end

  def start(opts={})
    args = opts[:args]
    agent = args[0]
    Smith::Sync::Messaging.new(:agents_available).send_and_receive_message({:agent => agent}, :timeout => 5) do |header,result,pass_through|
      if !result.empty?
        Smith::Sync::Messaging.new(:manage).send_message(agent)
      else
        raise AgentDoesNotExist, agent
      end
    end
    ''
  end

  def stop(opts={})
    args = opts[:args]
    agent = args.first
    if agent == 'all'
      Smith::Sync::Messaging.new(:agents_shutdown).send_message('all')
    else
      Smith::Sync::Messaging.new(:agents_available).send_and_receive_message({:agent => agent}, :timeout => 5) do |header,result,pass_through|
        if !result.empty?
          Smith::Sync::Messaging.new(:agents_shutdown).send_message(agent)
        else
          raise AgentDoesNotExist, agent
        end
      end
    end
    ''
  end

  def restart(opts={})
    stop(opts)
    start(opts)
  end

  def self.commands
    %w{ls list message stop start restart agents}
  end
end

class SmithControl
  def initialize
    trap('INT', 'SIG_IGN')
  end

  def run_command(command, args)
    cmd = AgentCommands.new
    begin
      result = cmd.send(command, :args => args)
      puts (result.is_a?(Array)) ? result.sort : result
    rescue NoMethodError, TypeError => e
      pp e
      STDERR.puts "#{command}: command not known"
    rescue AgentCommands::AgentDoesNotExist => e
      STDERR.puts "No such agent: #{e}"
    rescue Smith::Timeout => e
      STDERR.puts "Cannot contact the agency. Is it running?"
    end
  end
end

smith = SmithControl.new
smith.run_command(ARGV.shift, ARGV)
